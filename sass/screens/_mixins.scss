$size-breaks: ();
$min: 0px;
@each $name, $max in $screen-sizes {
    $size-breaks: map-merge($size-breaks, ($name: ($min, $max)));
    @if ($max) {
        $min: $max + 1px;
    }
}

@mixin only($size: null) {
    @if not $size {
        @content;
    } @else if map-has-key($size-breaks, $size) {
        $lims: map-get($size-breaks, $size);
        @if (nth($lims, 1) == 0px) {
            @include and-down($size) {
                @content;
            }
        } @else if (not nth($lims, 2)) {
            @include and-up($size) {
                @content;
            }
        } @else {
            @media screen and (min-width: nth($lims, 1)) and (max-width: nth($lims, 2)) {
                @content;
            }
        }
    } @else {
        @warn "Unknown size: #{$size}";
    }
}

@mixin and-up($size: null) {
    @if map-has-key($size-breaks, $size) {
        $lims: map-get($size-breaks, $size);
        @if (nth($lims, 1) > 0px) {
            @media screen and (min-width: nth($lims, 1)) {
                @content;
            }
        } @else {
            @content;
        }
    } @else {
        @warn "Unknown size: #{$size}";
        @debug $size;
    }
}

@mixin and-down($size: null) {
    @if map-has-key($size-breaks, $size) {
        $lims: map-get($size-breaks, $size);
        @if (nth($lims, 2)) {
            @media screen and (max-width: nth($lims, 2)) {
                @content;
            }
        } @else {
            @content;
        }
    } @else {
        @warn "Unknown size: #{$size}";
    }
}

@mixin screen-mixin-switch($mixin, $size) {
    @if ($mixin == "only") {
        @include only($size) {
            @content;
        }
    } @else if ($mixin == "and-up") {
        @include and-up($size) {
            @content;
        }
    } @else if ($mixin == "and-down") {
        @include and-down($size) {
            @content;
        }
    } @else {
        @warn "Unkown mixin: #{$mixin}";
    }
}

$for-screens-param-size: null;
$for-screens-param-value: null;
$for-screens-param-is-blank: null;
@mixin for-screens($sizes: null, $skip-blank: false) {
    @if (not $sizes) {
        $sizes: map-keys($size-breaks);
    }
    @if (not $skip-blank) {
        $for-screens-param-size: null !global;
        $for-screens-param-value: null !global;
        $for-screens-param-is-blank: true !global;
        @content;
    }
    $for-screens-param-is-blank: false !global;
    @each $size in if(type-of($sizes) == "map", map-keys($sizes), $sizes) {
        $for-screens-param-size: $size !global;
        $for-screens-param-value: if(type-of($sizes) == "map", map-get($sizes, $size), null) !global;
        @content;
    }
}
@function for-screens-size() {
    @return $for-screens-param-size;
}
@function for-screens-value() {
    @return $for-screens-param-value;
}
@function for-screens-is-blank() {
    @return $for-screens-param-is-blank;
}

$for-screens-prefixes-param-pre: null;
@mixin for-screens-prefixes($pre: false, $post: true) {
    @include for-screens() {
        @if (for-screens-is-blank()) {
            $for-screens-prefixes-param-pre: null !global;
        } @else {
            $for-screens-prefixes-param-pre: if($pre, "-", "") + for-screens-size() + if($post, "-", "") !global;
        }
        @content;
    }
}
@function for-screens-prefixes-pre() {
    @return $for-screens-prefixes-param-pre;
}
