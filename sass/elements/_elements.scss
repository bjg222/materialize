
button,
input,
optgroup,
select,
textarea {
  font-family: $font-stack;
}

ul {
  &:not(.browser-default) {
    padding-left: 0;
    list-style-type: none;

    & > li {
      list-style-type: none;
    }
  }
}

p {
    margin-bottom: 1.2rem;
}
h1 { margin: ($h1-fontsize / 1.5) 0 ($h1-fontsize / 2.5) 0; }
h2 { margin: ($h2-fontsize / 1.5) 0 ($h2-fontsize / 2.5) 0; }
h3 { margin: ($h3-fontsize / 1.5) 0 ($h3-fontsize / 2.5) 0; }
h4 { margin: ($h4-fontsize / 1.5) 0 ($h4-fontsize / 2.5) 0; }
h5 { margin: ($h5-fontsize / 1.5) 0 ($h5-fontsize / 2.5) 0; }
h6 { margin: ($h6-fontsize / 1.5) 0 ($h6-fontsize / 2.5) 0; }


// classic clearfix
.clearfix {
  clear: both;
}


//Why is this called z-depth?  It's about shadows, not z-index.  And dp has no meaning in CSS
// Z-levels
.z-depth-0 {
  box-shadow: none !important;
}

/* 2dp elevation modified*/
.z-depth-1 {
  box-shadow: 0 2px 2px 0 rgba(0,0,0,0.14),
              0 3px 1px -2px rgba(0,0,0,0.12),
              0 1px 5px 0 rgba(0,0,0,0.2);
}
.z-depth-1-half {
  box-shadow: 0 3px 3px 0 rgba(0, 0, 0, 0.14), 0 1px 7px 0 rgba(0, 0, 0, 0.12), 0 3px 1px -1px rgba(0, 0, 0, 0.2);
}

/* 6dp elevation modified*/
.z-depth-2 {
  box-shadow: 0 4px 5px 0 rgba(0,0,0,0.14),
              0 1px 10px 0 rgba(0,0,0,0.12),
              0 2px 4px -1px rgba(0,0,0,0.3);
}

/* 12dp elevation modified*/
.z-depth-3 {
  box-shadow: 0 8px 17px 2px rgba(0,0,0,0.14),
              0 3px 14px 2px rgba(0,0,0,0.12),
              0 5px 5px -3px rgba(0, 0, 0, 0.2);
}

/* 16dp elevation */
.z-depth-4 {
  box-shadow: 0 16px 24px 2px rgba(0,0,0,0.14),
              0 6px 30px 5px rgba(0,0,0,0.12),
              0 8px 10px -7px rgba(0,0,0,0.2);
}

/* 24dp elevation */
.z-depth-5 {
  box-shadow: 0 24px 38px 3px rgba(0,0,0,0.14),
              0 9px 46px 8px rgba(0,0,0,0.12),
              0 11px 15px -7px rgba(0,0,0,0.2);
}

.hoverable {
  transition: box-shadow .25s;

  &:hover {
    box-shadow: 0 8px 17px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19);
  }
}

// Dividers

hr, .divider {
  height: 1px;
  overflow: hidden;
  background-color: $divider-color;
}


//  Blockquote

blockquote {
  margin: 20px 0;
  padding-left: 1.5rem;
  border-left: 5px solid $primary-color;
}

// Icon Styles

i {
  line-height: inherit;

  &.left {
    float: left;
    margin-right: 15px;
  }
  &.right {
    float: right;
    margin-left: 15px;
  }
  &.tiny {
    font-size: 1rem;
  }
  &.small {
    font-size: 2rem;
  }
  &.medium {
    font-size: 4rem;
  }
  &.large {
    font-size: 6rem;
  }
}

// Images
img.responsive-img,
video.responsive-video {
  max-width: 100%;
  height: auto;
}

//TODO: WTF are these?  They seem to have no references anywhere else and make
//very little sense.  Don't see them in the JS anywhere, either.  Perhaps vestiges
//left over from some previous feature that was removed or replaced?
/*********************
  Transition Classes
**********************/

ul.staggered-list li {
  opacity: 0;
}

.fade-in {
  opacity: 0;
  transform-origin: 0 50%;
}


/*********************
  Media Query Classes
**********************/

@include for-screens-prefixes(true, false) {
  $s: for-screens-size();
  $p: for-screens-prefixes-pre();

  @include only($s) {
    .hide#{$p} {
      display: none; //Need !important?
    }
    .show#{$p} {
      display: block;
    }
    #{selector-append(elements-of-type(inline), ".show#{$p}")} {
      display: inline;
    }
  }
  @if (not for-screens-is-blank()) {
    @include and-up($s) {
      .hide#{$p}-and-up {
        display: none;
      }
      .show#{$p}-and-up {
        display: block;
      }
      #{selector-append(elements-of-type(inline), ".show#{$p}-and-up")} {
        display: inline;
      }
    }
    @include and-down($s) {
      .hide#{$p}-and-down {
        display: none;
      }
      .show#{$p}-and-down {
        display: block;
      }
      #{selector-append(elements-of-type(inline), ".show#{$p}-and-down")} {
        display: inline;
      }
    }
  }
}

// Tables
table, th, td {
   border: none;
}

table {
  width:100%;
  display: table;
  border-collapse: collapse;
  border-spacing: 0;

  &.striped {
    tr {
      border-bottom: none;
    }

    > tbody {
      > tr:nth-child(odd) {
        background-color: $table-striped-color;
      }

      > tr > td {
        border-radius: 0;
      }
    }
  }

  &.highlight > tbody > tr {
    transition: background-color .25s ease;
    &:hover {
      background-color: $table-highlight-color;
    }
  }

  &.centered {
    > tbody, > thead, > tfoot {
      > th, > td {
      text-align: center;
      }
    }
  }
}

thead {
  border-bottom: 2px solid $table-border-color;
}

tfoot {
  border-top: 2px solid $table-border-color;
}

tr {
  border-bottom: 1px solid $table-border-color;
  &:last-child {
    border-bottom: none;
  }
}

td, th{
  padding: 15px 5px;
  display: table-cell;
  text-align: left;
  vertical-align: middle;
  border-radius: 2px;
}

// Responsive Table
// I don't like this implementation, for a few reasons:
// - it makes the tables scroll side to side, which isn't really an improvement,
//   just making only the table need to scroll rather than the whole page
// - it flips the table from vert to horiz, which is only a good idea in some
//   situations, the example they give on their webpage isn't even one of these
//   for tables like a long list of bank transactions, it just makes for endless
//   side scrolling!
// - it can't handle a table with a footer (tfoot), and there's not a way to
//   adapt to be able to, because the tfoot comes after the tbody, so can't be
//   floated right to sit in the appropriate transposed position.  it could just
//   be stuck awkardly below, which doesn't look horrible, but seems wrong
// I think the appropriate solution is to collapse rows with display:block
// (like https://allthingssmitty.com/2016/10/03/responsive-table-layout/),
// or perhaps using the accordian component, or maybe split it up into multiple
// types of responsiveness, including scrolling, stacking, etc.  It's also
// possible there's a CSS grid solution to be found here
@include and-down($responsive-table-breakpoint) {

  table.responsive-table {
    width: 100%;
    border-collapse: collapse;
    border-spacing: 0;
    display: block;
    position: relative;

    td:empty:before {
      content: '\00a0';
    }

    th,
    td {
      margin: 0;
      vertical-align: top;
    }

    th { text-align: left; }
    thead {
      display: block;
      float: left;

      tr {
        display: block;
        padding: 0 10px 0 0;

        th::before {
          content: "\00a0";
        }
      }
    }
    tbody {
      display: block;
      width: auto;
      position: relative;
      overflow-x: auto;
      white-space: nowrap;

      tr {
        display: inline-block;
        vertical-align: top;
      }
    }
    th {
      display: block;
      text-align: right;
    }
    td {
      display: block;
      min-height: 1.25em;
      text-align: left;
    }
    tr {
      border-bottom: none;
      padding: 0 10px;
    }

    /* sort out borders */
    thead {
      border: 0;
      border-right: 1px solid $table-border-color;
    }

    tfoot {
      //For now, until a better idea is found, just spread the footer across the bottom of the table
      display: block;
      tr {
        display: flex;
        justify-content: center;
        th:empty,
        td:empty {
          display: none;
        }
      }
    }
  }

}

// Responsive Videos
.video-container {
    position: relative;
    //This assumes a 16:9 video!!!  Why is that ratio hardcoded!?!
    padding-bottom: 56.25%;
    height: 0;
    overflow: hidden;

    iframe, object, embed {
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
    }
}


/*******************
  Utility Classes
*******************/

//TODO: all the below should use for-screens like show/hide above

// Text Align
@mixin align($pos) {
  text-align: $pos;
}

.left-align {
    @include align(left);
}
.right-align {
    @include align(right);
}
.center, .center-align {
    @include align(center);
}
.justify {
    @include align(justify);
}


@mixin valign($pos) {
  display: flex;
  align-items: if($pos == "top", flex-start, if($pos == "bottom", flex-end, center));
}

.top-valign {
    @include valign(top);
}
.middle-valign {
    @include valign(middle);
}
.bottom-valign {
    @include valign(bottom);
}

@mixin align-and-valign($hpos, $vpos) {
  @include valign($vpos);
  justify-content: if($hpos == "left", flex-start, if($hpos == "right", flex-end, center));
}

@mixin float($pos) {
  float: $pos; //Need important?
}

.left {
    @include float(left);
}
.right {
    @include float(right);
}

// No Text Select
.no-select {
  user-select: none;
}

.circle {
  border-radius: 50%;
}

@mixin center {
  display: block;
  margin-left: auto;
  margin-right: auto;
}

.center-block {
  @include center;
}

@mixin ellipsize {
    overflow: hidden;
    text-overflow: ellipsis;
}

.ellipsize {
    @include ellipsize;
}

.truncate {
  display: block;
  white-space: nowrap;
  @include ellipsize;
}

.no-padding {
  padding: 0 !important;
}
