@mixin fractions($nums, $dens, $prefix: null, $onparent: true) {
    $done: ();
    @each $den, $den-name in $dens {
        @each $num, $num-name in $nums {
            @if ($num < $den or ($num == 1 and $den == 1)) and (not index($done, $num / $den)) {
                $selector: if(& and $onparent, "&", "") + "." + "#{$prefix}" + if($num == 1, "", $num-name + "-") + $den-name + if($num == 1, "", "s");
                #{$selector} {
                    flex: 0 0 $num / $den * 100%;
                }
                $done: append($done, $num / $den);
            }
        }
    }
}

@if $grid-type == 'flex' {

.section {
    padding: $flexgrid-section-padding 0;
    &.no-padding {
        padding: 0;
    }
    &.full-height {
        min-height: 110vh;
        &-exact {
            min-height: 100vh;
        }
    }
}

.container {
    @if (type-of($flexgrid-container-width) != map) {
        width: $flexgrid-container-width;
    }
    @if (type-of($flexgrid-container-max-width) != map) {
        max-width: $flexgrid-container-max-width;
    }
    @include for-screens(null, true) {
        $s: for-screens-size();
        @include and-up($s) {
            @if (type-of($flexgrid-container-width) == map) {
                width: map-get($flexgrid-container-width, $s);
            }
            @if (type-of($flexgrid-container-max-width) == map) {
                max-width: map-get($flexgrid-container-max-width, $s);
            }
        }
    }
    margin: 0 auto;
    padding: 0;
}

$denominators: (
    1: "full",
    2: "half",
    3: "third",
    4: "quarter",
    5: "fifth",
    6: "sixth",
    8: "eighth",
    10: "tenth",
    12: "twelfth",
    //16: "sixteenth",
    //20: "tewntieth"
);
$numerators: (
    1: null,
    2: "two",
    3: "three",
    4: "four",
    5: "five",
    6: "six",
    7: "seven",
    8: "eight",
    9: "nine",
    10: "ten",
    11: "eleven",
    12: "twelve",
    13: "thirteen",
    14: "fourteen",
    15: "fifteen",
    16: "sixteen",
    17: "seventeen",
    18: "eighteen",
    19: "nineteen",
    20: "twenty"
);

.row {
    display: flex;
    flex-direction: row;
    flex-wrap: wrap;
    justify-content: center;
    align-items: stretch;
    align-content: center;
    padding: 0 ($flexgrid-gutter);
    margin: (-$flexgrid-row-spacing) 0 ($flexgrid-row-spacing) (-$flexgrid-col-spacing);
    &:last-child {
        margin-bottom: 0;
    }
    &.no-row-gap {
        margin-top: 0;
        margin-bottom: 0;
        .col {
            padding-top: 0;
        }
    }
    &.no-col-gap {
        margin-left: 0;
        .col {
            padding-left: 0;
        }
    }
    &.no-gaps {
        @extend .no-row-gap, .no-col-gap;
    }
    &.no-gutter {
        padding-left: 0;
        padding-right: 0;
    }

    @include for-screens-prefixes {
        $p: for-screens-prefixes-pre();

        &.#{$p}reverse {
            flex-direction: row-reverse;
        }
        &.#{$p}as-row {
            flex-direction: row;
        }
        &.#{$p}as-col {
            flex-direction: column;
            &.#{$p}reverse {
                flex-direction: column-reverse;
            }
        }

        &.#{$p}wrap-none {
            flex-wrap: nowrap;
        }
        &.#{$p}wrap {
            flex-wrap: wrap;
        }
        &.#{$p}wrap-reverse {
            flex-wrap: wrap-reverse;
        }

        &.#{$p}items {
            &-left {
                justify-content: flex-start;
            }
            &-center {
                justify-content: center;
            }
            &-right {
                justify-content: flex-end;
            }
            &-space-between {
                justify-content: space-between;
            }
            &-space-around {
                justify-content: space-around;
            }
            &-space-even {
                justify-content: space-evenly;
            }
            &-top {
                align-items: flex-start;
            }
            &-middle {
                align-items: center;
            }
            &-bottom {
                align-items: flex-end;
            }
            &-stretch {
                align-items: stretch;
            }
            &-baseline {
                align-items: baseline;
            }
        }

        &.#{$p}content {
            &-start {
                align-content: flex-start;
            }
            &-middle {
                align-content: center;
            }
            &-end {
                align-content: flex-end;
            }
            &-stretch {
                align-content: stretch;
            }
            &-space-between {
                align-content: space-between;
            }
            &-space-around {
                align-content: space-around;
            }
            &-space-evenly {
                align-content: space-evenly;
            }
        }
    }

    .col {
        flex: 1 1 auto;
        margin: 0;
        padding: ($flexgrid-row-spacing) 0 0 ($flexgrid-col-spacing);

        @include for-screens-prefixes {
            $p: for-screens-prefixes-pre();

            @include fractions($numerators, $denominators, $p);

            &.#{$p}auto {
                flex: 1 1 auto;
            }

            &.#{$p}self {
                &-top {
                    align-self: flex-start;
                }
                &-middle {
                    align-self: center;
                }
                &-bottom {
                    align-self: flex-end;
                }
                &-stretch {
                    align-self: stretch;
                }
                &-baseline {
                    align-self: baseline;
                }
            }

            &.#{$p}no {
                &-grow {
                    flex-grow: 0;
                }
                &-shrink {
                    flex-shrink: 0;
                }
                &-adjust {
                    flex-grow: 0;
                    flex-shrink: 0;
                }
            }
        }
    }
}

}
