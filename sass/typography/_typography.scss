
a {
  text-decoration: none;
  color: $link-color;

  // Gets rid of tap active state
  -webkit-tap-highlight-color: transparent;

  &:visited,
  &:active {
      color: $link-visited-color;
  }
}

html{
  line-height: $line-height;

  @if (type-of($font-size) != map) {
    font-size: $font-size;
  }
  @include for-screens {
      $s: for-screens-size();
      @if (type-of($font-size) == map) {
          width: map-get($font-size, $s);
      }
  }

  font-family: $font-stack;
  font-weight: $font-weight;
  color: $text-color;
}
h1, h2, h3, h4, h5, h6 {
	font-weight: $heading-font-weight;
  line-height: $heading-line-height;
  font-family: $heading-font-stack;
}

// Header Styles
h1 a, h2 a, h3 a, h4 a, h5 a, h6 a { font-weight: inherit; }
h1 { font-size: $h1-fontsize; line-height: $h1-line-height; }
h2 { font-size: $h2-fontsize; line-height: $h2-line-height; }
h3 { font-size: $h3-fontsize; line-height: $h3-line-height; }
h4 { font-size: $h4-fontsize; line-height: $h4-line-height; }
h5 { font-size: $h5-fontsize; line-height: $h5-line-height; }
h6 { font-size: $h6-fontsize; line-height: $h6-line-height; }
//TODO: Really, just the typography related styles should be here, because the margins go in elements

// Text Styles
em, .italic { font-style: italic; }
strong, .bold { font-weight: $bold-font-weight; }
small, .small { font-size: 0.75em; }
big, .big { font-size: 1.25em; }
.light { font-weight: $light-font-weight; }
.thin { font-weight: $thin-font-weight; }

.accent {
  font-family: $accent-font-stack;
  font-weight: $accent-font-weight;
}

.display {
  font-family: $display-font-stack;
  font-weight: $display-font-weight;
}

@mixin big-first-letter {
  &::first-letter {
    font-size: 1.5em;
  }
}

//I don't understand the point of this...  I guess it's a neat trick to have
//the font size change smoothly with screen size, but it seems like it would
//make it hard to plan layouts around continuous breakpoints when everything
//else is around more discrete breakpoints
.flow-text{
  $i: 0;
  @while $i <= $intervals {
    @media only screen and (min-width : 360 + ($i * $interval-size)) {
      font-size: 1.2rem * (1 + (.02 * $i));
    }
    $i: $i + 1;
  }

  // Handle below 360px screen
  @media only screen and (max-width: 360px) {
    font-size: 1.2rem;
  }
}
